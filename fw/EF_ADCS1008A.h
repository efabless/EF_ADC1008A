

/*
	Copyright 2023 Efabless Corp.

	Author: Mohamed Shalan (mshalan@efabless.com)

	This file is auto-generated by wrapper_gen.py on 2023-11-28

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	    http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.

*/


/*! \file EF_ADCS1008A.h
    \brief C header file for the EF_ADCS1008A IP.
    
*/

#ifndef EF_ADCS1008A_H
#define EF_ADCS1008A_H

/******************************************************************************
* Includes
******************************************************************************/
#include "EF_Driver_Common.h"

/******************************************************************************
* Macros and Constants
******************************************************************************/

#ifndef IO_TYPES
#define IO_TYPES
#define   __R     volatile const uint32_t
#define   __W     volatile       uint32_t
#define   __RW    volatile       uint32_t
#endif

#define EF_ADCS1008A_TCTRL_REG_CLKDIV_BIT	((uint32_t)0)
#define EF_ADCS1008A_TCTRL_REG_CLKDIV_MASK	((uint32_t)0xff)
#define EF_ADCS1008A_TCTRL_REG_SAMPLE_DIV_BIT	((uint32_t)8)
#define EF_ADCS1008A_TCTRL_REG_SAMPLE_DIV_MASK	((uint32_t)0xff00)
#define EF_ADCS1008A_TCTRL_REG_SWIDTH_BIT	((uint32_t)16)
#define EF_ADCS1008A_TCTRL_REG_SWIDTH_MASK	((uint32_t)0xf0000)
#define EF_ADCS1008A_TCTRL_REG_MAX_VALUE	((uint32_t)0xFFFFFFFF)

#define EF_ADCS1008A_CHSEL_REG_CHANNEL_BIT	((uint32_t)0)
#define EF_ADCS1008A_CHSEL_REG_CHANNEL_MASK	((uint32_t)0x7)
#define EF_ADCS1008A_CHSEL_REG_MAX_VALUE	((uint32_t)0x7)

#define EF_ADCS1008A_CTRL_REG_EN_BIT	((uint32_t)0)
#define EF_ADCS1008A_CTRL_REG_EN_MASK	((uint32_t)0x1)
#define EF_ADCS1008A_CTRL_REG_SEQEN_BIT	((uint32_t)1)
#define EF_ADCS1008A_CTRL_REG_SEQEN_MASK	((uint32_t)0x2)
#define EF_ADCS1008A_CTRL_REG_MAX_VALUE	((uint32_t)0x3)

#define EF_ADCS1008A_SOC_REG_SOC_BIT	((uint32_t)0)
#define EF_ADCS1008A_SOC_REG_SOC_MASK	((uint32_t)0x1)
#define EF_ADCS1008A_SOC_REG_MAX_VALUE	((uint32_t)0x1)

#define EF_ADCS1008A_SEQCTRL0_REG_SEQ0_BIT	((uint32_t)0)
#define EF_ADCS1008A_SEQCTRL0_REG_SEQ0_MASK	((uint32_t)0x1f)
#define EF_ADCS1008A_SEQCTRL0_REG_SEQ1_BIT	((uint32_t)8)
#define EF_ADCS1008A_SEQCTRL0_REG_SEQ1_MASK	((uint32_t)0x1f00)
#define EF_ADCS1008A_SEQCTRL0_REG_SEQ2_BIT	((uint32_t)16)
#define EF_ADCS1008A_SEQCTRL0_REG_SEQ2_MASK	((uint32_t)0x1f0000)
#define EF_ADCS1008A_SEQCTRL0_REG_SEQ3_BIT	((uint32_t)24)
#define EF_ADCS1008A_SEQCTRL0_REG_SEQ3_MASK	((uint32_t)0x1f000000)
#define EF_ADCS1008A_SEQCTRL0_REG_MAX_VALUE	((uint32_t)0xFFFFFFFF)

#define EF_ADCS1008A_SEQCTRL1_REG_SEQ4_BIT	((uint32_t)0)
#define EF_ADCS1008A_SEQCTRL1_REG_SEQ4_MASK	((uint32_t)0x1f)
#define EF_ADCS1008A_SEQCTRL1_REG_SEQ5_BIT	((uint32_t)8)
#define EF_ADCS1008A_SEQCTRL1_REG_SEQ5_MASK	((uint32_t)0x1f00)
#define EF_ADCS1008A_SEQCTRL1_REG_SEQ6_BIT	((uint32_t)16)
#define EF_ADCS1008A_SEQCTRL1_REG_SEQ6_MASK	((uint32_t)0x1f0000)
#define EF_ADCS1008A_SEQCTRL1_REG_SEQ7_BIT	((uint32_t)24)
#define EF_ADCS1008A_SEQCTRL1_REG_SEQ7_MASK	((uint32_t)0x1f000000)
#define EF_ADCS1008A_SEQCTRL1_REG_MAX_VALUE	((uint32_t)0xFFFFFFFF)

#define EF_ADCS1008A_DATA_REG_DATA_BIT	((uint32_t)0)
#define EF_ADCS1008A_DATA_REG_DATA_MASK	((uint32_t)0x3ff)
#define EF_ADCS1008A_DATA_REG_MAX_VALUE	((uint32_t)0x3FF)

#define EF_ADCS1008A_FIFOLEVEL_REG_VALUE_BIT	((uint32_t)0)
#define EF_ADCS1008A_FIFOLEVEL_REG_VALUE_MASK	((uint32_t)0x1f)
#define EF_ADCS1008A_FIFOLEVEL_REG_MAX_VALUE	((uint32_t)0x1F)

#define EF_ADCS1008A_DATA_FIFO_LEVEL_REG_LEVEL_BIT	((uint32_t)0)
#define EF_ADCS1008A_DATA_FIFO_LEVEL_REG_LEVEL_MASK	((uint32_t)0x1f)
#define EF_ADCS1008A_DATA_FIFO_LEVEL_REG_MAX_VALUE	((uint32_t)0x1F)

#define EF_ADCS1008A_DATA_FIFO_THRESHOLD_REG_THRESHOLD_BIT	((uint32_t)0)
#define EF_ADCS1008A_DATA_FIFO_THRESHOLD_REG_THRESHOLD_MASK	((uint32_t)0x1f)
#define EF_ADCS1008A_DATA_FIFO_THRESHOLD_REG_MAX_VALUE	((uint32_t)0x1F)

#define EF_ADCS1008A_DATA_FIFO_FLUSH_REG_FLUSH_BIT	((uint32_t)0)
#define EF_ADCS1008A_DATA_FIFO_FLUSH_REG_FLUSH_MASK	((uint32_t)0x1)
#define EF_ADCS1008A_DATA_FIFO_FLUSH_REG_MAX_VALUE	((uint32_t)0x1)


#define EF_ADCS1008A_FIFO_FULL_FLAG	((uint32_t)0x1)
#define EF_ADCS1008A_FIFO_LEVEL_FLAG	((uint32_t)0x2)
#define EF_ADCS1008A_EOC_FLAG	((uint32_t)0x4)


          
/******************************************************************************
* Typedefs and Enums
******************************************************************************/
          
typedef struct _EF_ADCS1008A_TYPE_ {
	__RW	TCTRL;
	__RW	CHSEL;
	__RW	CTRL;
	__RW	SOC;
	__RW	SEQCTRL0;
	__RW	SEQCTRL1;
	__RW	DATA;
	__RW	FIFOLEVEL;
	__R 	reserved_0[16248];
	__R 	DATA_FIFO_LEVEL;
	__W 	DATA_FIFO_THRESHOLD;
	__W 	DATA_FIFO_FLUSH;
	__R 	reserved_1[61];
	__RW	IM;
	__R 	MIS;
	__R 	RIS;
	__W 	IC;
} EF_ADCS1008A_TYPE;

typedef struct _EF_ADCS1008A_TYPE_ *EF_ADCS1008A_TYPE_PTR;     // Pointer to the register structure
   
          


/******************************************************************************
* Function Prototypes
******************************************************************************/

//! Sets the clock divider value
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] value The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_setClockDivider(EF_ADCS1008A_TYPE_PTR adc, char value);

//! Sets the sample divider value
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] value The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_setSampleDivider(EF_ADCS1008A_TYPE_PTR adc, char value);

//! Sets the timer control register value
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] value The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_setTimerCtrlReg(EF_ADCS1008A_TYPE_PTR adc, uint32_t value);


//! Gets the timer control register value
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [out] ctrl_value The value to be read
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_getTimerCtrlReg(EF_ADCS1008A_TYPE_PTR adc, uint32_t *ctrl_value);

//! Sets the channel number
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] value The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_setChannelNumber (EF_ADCS1008A_TYPE_PTR adc, uint32_t value);

//! Gets the channel number
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [out] channel_number The value to be read
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_getChannelNumber (EF_ADCS1008A_TYPE_PTR adc, uint32_t *channel_number);


//! Enables or disables the ADC
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] enable The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_enable (EF_ADCS1008A_TYPE_PTR adc, bool enable);


//! Enables or disables the sequencer
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] enable The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_sequencerEnable (EF_ADCS1008A_TYPE_PTR adc, bool enable);


//! Sets the control register value
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] value The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_setCtrlReg(EF_ADCS1008A_TYPE_PTR adc, uint32_t value);

//! Gets the control register value
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [out] ctrl_value The value to be read
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_getCtrlReg (EF_ADCS1008A_TYPE_PTR adc, uint32_t *ctrl_value);


//! Sets the start conversion bit
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] start The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_setStartConversion (EF_ADCS1008A_TYPE_PTR adc, bool start);

//! Gets the start conversion bit
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [out] value The value to be read
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_getStartConversion (EF_ADCS1008A_TYPE_PTR adc, uint32_t *value);


//! Sets the step 0 value in the sequencer control register 0
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] value The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_setStep0 (EF_ADCS1008A_TYPE_PTR adc, uint32_t value);

//! Sets the step 1 value in the sequencer control register 0
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] value The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_setStep1 (EF_ADCS1008A_TYPE_PTR adc, uint32_t value);


//! Sets the step 2 value in the sequencer control register 0
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] value The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_setStep2 (EF_ADCS1008A_TYPE_PTR adc, uint32_t value);


//! Sets the step 3 value in the sequencer control register 0
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] value The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_setStep3 (EF_ADCS1008A_TYPE_PTR adc, uint32_t value);


//! Sets the sequencer control register 0 value
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] value The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_setSeqCtrlReg0 (EF_ADCS1008A_TYPE_PTR adc, uint32_t value);


//! Gets the sequencer control register 0 value
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [out] seq_ctrl_value The value to be read
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_getSeqCtrlReg0 (EF_ADCS1008A_TYPE_PTR adc, uint32_t *seq_ctrl_value);


//! Sets the step 4 value in the sequencer control register 1
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] value The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_setStep4 (EF_ADCS1008A_TYPE_PTR adc, uint32_t value);


//! Sets the step 5 value in the sequencer control register 1
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] value The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_setStep5 (EF_ADCS1008A_TYPE_PTR adc, uint32_t value);


//! Sets the step 6 value in the sequencer control register 1
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] value The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_setStep6 (EF_ADCS1008A_TYPE_PTR adc, uint32_t value);


//! Sets the step 7 value in the sequencer control register 1
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] value The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_setStep7 (EF_ADCS1008A_TYPE_PTR adc, uint32_t value);


//! Sets the sequencer control register 1 value
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] value The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_setSeqCtrlReg1 (EF_ADCS1008A_TYPE_PTR adc, uint32_t value);


//! Gets the sequencer control register 1 value
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [out] seq_ctrl_value The value to be read
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_getSeqCtrlReg1 (EF_ADCS1008A_TYPE_PTR adc, uint32_t *seq_ctrl_value);



//! Gets the data register value
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [out] data The value to be read
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_getDataReg (EF_ADCS1008A_TYPE_PTR adc, uint32_t *data);


//! Sets the FIFO level value
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] value The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_setFIFOlevel (EF_ADCS1008A_TYPE_PTR adc, uint32_t value);



//! Gets the FIFO level value
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [out] fifo_level The value to be read
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_getFIFOlevel (EF_ADCS1008A_TYPE_PTR adc, uint32_t *fifo_level);



//! Gets th raw interrupt status value
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [out] ris The value to be read
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_getRIS (EF_ADCS1008A_TYPE_PTR adc, uint32_t *ris);


//! Gets the masked interrupt status value
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [out] mis The value to be read
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_getMIS (EF_ADCS1008A_TYPE_PTR adc, uint32_t *mis);


//! Sets the interrupt mask value
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] value The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_setIM (EF_ADCS1008A_TYPE_PTR adc, uint32_t value);


//! Gets the interrupt mask value
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [out] im The value to be read
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_getIM (EF_ADCS1008A_TYPE_PTR adc, uint32_t *im);


//! Sets the interrupt clear value
    /*!
    \param [in] adc An \ref EF_ADCS1008A_TYPE_PTR. The pointer to the ADCS1008A registers structure
    \param [in] value The value to be set
    \return EF_DRIVER_STATUS
    */
EF_DRIVER_STATUS EF_ADCS1008A_setIC (EF_ADCS1008A_TYPE_PTR adc, uint32_t value);

/******************************************************************************
* External Variables
******************************************************************************/


#endif // EF_ADCS1008A_H

/******************************************************************************
* End of File
******************************************************************************/
          
          
