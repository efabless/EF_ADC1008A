
/*
	Copyright 2023 Efabless Corp.

	Author: Mohamed Shalan (mshalan@efabless.com)

	This file is auto-generated by wrapper_gen.py on 2023-10-29

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	    http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.

*/


`timescale			1ns/1ns
`default_nettype	none





module EF_ADCS1008A_apb (
	input	wire 		cmp,
	output	wire 		sample_n,
	output	wire [2:0]	ch_sel_out,
	output	wire [11:0]	adc_data,
	output	wire 		EN,
	output	wire 		dac_rst,
	input	wire 		PCLK,
	input	wire 		PRESETn,
	input	wire [31:0]	PADDR,
	input	wire 		PWRITE,
	input	wire 		PSEL,
	input	wire 		PENABLE,
	input	wire [31:0]	PWDATA,
	output	wire [31:0]	PRDATA,
	output	wire 		PREADY,
	output	wire 		irq
);
	localparam[15:0] TCTRL_REG_ADDR = 16'h0000;
	localparam[15:0] CHSEL_REG_ADDR = 16'h0004;
	localparam[15:0] CTRL_REG_ADDR = 16'h0008;
	localparam[15:0] SOC_REG_ADDR = 16'h000c;
	localparam[15:0] SEQCTRL0_REG_ADDR = 16'h0010;
	localparam[15:0] SEQCTRL1_REG_ADDR = 16'h0014;
	localparam[15:0] DATA_REG_ADDR = 16'h0018;
	localparam[15:0] FIFOLEVEL_REG_ADDR = 16'h001c;
	localparam[15:0] ICR_REG_ADDR = 16'h0f00;
	localparam[15:0] RIS_REG_ADDR = 16'h0f04;
	localparam[15:0] IM_REG_ADDR = 16'h0f08;
	localparam[15:0] MIS_REG_ADDR = 16'h0f0c;

	reg	[31:0]	TCTRL_REG;
	reg	[2:0]	CHSEL_REG;
	reg	[1:0]	CTRL_REG;
	reg	[0:0]	SOC_REG;
	reg	[31:0]	SEQCTRL0_REG;
	reg	[31:0]	SEQCTRL1_REG;
	reg	[4:0]	FIFOLEVEL_REG;
	reg	[2:0]	RIS_REG;
	reg	[2:0]	ICR_REG;
	reg	[2:0]	IM_REG;

	wire[7:0]	clkdiv	= TCTRL_REG[7:0];
	wire[7:0]	sample_div	= TCTRL_REG[15:8];
	wire[3:0]	swidth	= TCTRL_REG[19:16];
	wire[2:0]	ch_sel_in	= CHSEL_REG[2:0];
	wire		en	= CTRL_REG[0:0];
	wire		seq_en	= CTRL_REG[1:1];
	wire		soc	= SOC_REG[0:0];
	wire[4:0]	seq0	= SEQCTRL0_REG[4:0];
	wire[4:0]	seq1	= SEQCTRL0_REG[12:8];
	wire[4:0]	seq2	= SEQCTRL0_REG[20:16];
	wire[4:0]	seq3	= SEQCTRL0_REG[28:24];
	wire[4:0]	seq4	= SEQCTRL1_REG[4:0];
	wire[4:0]	seq5	= SEQCTRL1_REG[12:8];
	wire[4:0]	seq6	= SEQCTRL1_REG[20:16];
	wire[4:0]	seq7	= SEQCTRL1_REG[28:24];
	wire[11:0]	data;
	wire[11:0]	DATA_REG	= data;
	wire[4:0]	fifo_threshold	= FIFOLEVEL_REG[4:0];
	wire		fifo_full;
	wire		_FIFO_FULL_FLAG_	= fifo_full;
	wire		fifo_above;
	wire		_FIFO_LEVEL_FLAG_	= fifo_above;
	wire		eoc;
	wire		_EOC_FLAG_	= eoc;
	wire[2:0]	MIS_REG	= RIS_REG & IM_REG;
	wire		apb_valid	= PSEL & PENABLE;
	wire		apb_we	= PWRITE & apb_valid;
	wire		apb_re	= ~PWRITE & apb_valid;
	wire		_clk_	= PCLK;
	wire		_rst_	= ~PRESETn;
	wire		rd	= (apb_re & (PADDR[15:0]==DATA_REG_ADDR));

	EF_ADCS1008A inst_to_wrap (
		.clk(_clk_),
		.rst_n(~_rst_),
		.swidth(swidth),
		.clkdiv(clkdiv),
		.sample_div(sample_div),
		.en(en),
		.cmp(cmp),
		.soc(soc),
		.dac_rst(dac_rst),
		.sample_n(sample_n),
		.eoc(eoc),
		.data(data),
		.adc_data(adc_data),
		.rd(rd),
		.ch_sel_out(ch_sel_out),
		.ch_sel_in(ch_sel_in),
		.seq0(seq0),
		.seq1(seq1),
		.seq2(seq2),
		.seq3(seq3),
		.seq4(seq4),
		.seq5(seq5),
		.seq6(seq6),
		.seq7(seq7),
		.seq_en(seq_en),
		.fifo_full(fifo_full),
		.fifo_threshold(fifo_threshold),
		.fifo_above(fifo_above),
		.EN(EN)
	);

	always @(posedge PCLK or negedge PRESETn) if(~PRESETn) TCTRL_REG <= 0; else if(apb_we & (PADDR[15:0]==TCTRL_REG_ADDR)) TCTRL_REG <= PWDATA[32-1:0];
	always @(posedge PCLK or negedge PRESETn) if(~PRESETn) CHSEL_REG <= 0; else if(apb_we & (PADDR[15:0]==CHSEL_REG_ADDR)) CHSEL_REG <= PWDATA[3-1:0];
	always @(posedge PCLK or negedge PRESETn) if(~PRESETn) CTRL_REG <= 0; else if(apb_we & (PADDR[15:0]==CTRL_REG_ADDR)) CTRL_REG <= PWDATA[2-1:0];
	always @(posedge PCLK or negedge PRESETn) if(~PRESETn) SOC_REG <= 0; else if(apb_we & (PADDR[15:0]==SOC_REG_ADDR)) SOC_REG <= PWDATA[1-1:0];
	always @(posedge PCLK or negedge PRESETn) if(~PRESETn) SEQCTRL0_REG <= 0; else if(apb_we & (PADDR[15:0]==SEQCTRL0_REG_ADDR)) SEQCTRL0_REG <= PWDATA[32-1:0];
	always @(posedge PCLK or negedge PRESETn) if(~PRESETn) SEQCTRL1_REG <= 0; else if(apb_we & (PADDR[15:0]==SEQCTRL1_REG_ADDR)) SEQCTRL1_REG <= PWDATA[32-1:0];
	always @(posedge PCLK or negedge PRESETn) if(~PRESETn) FIFOLEVEL_REG <= 0; else if(apb_we & (PADDR[15:0]==FIFOLEVEL_REG_ADDR)) FIFOLEVEL_REG <= PWDATA[5-1:0];
	always @(posedge PCLK or negedge PRESETn) if(~PRESETn) IM_REG <= 0; else if(apb_we & (PADDR[15:0]==IM_REG_ADDR)) IM_REG <= PWDATA[3-1:0];

	always @(posedge PCLK or negedge PRESETn) if(~PRESETn) ICR_REG <= 3'b0; else if(apb_we & (PADDR[15:0]==ICR_REG_ADDR)) ICR_REG <= PWDATA[3-1:0]; else ICR_REG <= 3'd0;

	always @(posedge PCLK or negedge PRESETn)
		if(~PRESETn) RIS_REG <= 3'd0;
		else begin
			if(_FIFO_FULL_FLAG_) RIS_REG[0] <= 1'b1; else if(ICR_REG[0]) RIS_REG[0] <= 1'b0;
			if(_FIFO_LEVEL_FLAG_) RIS_REG[1] <= 1'b1; else if(ICR_REG[1]) RIS_REG[1] <= 1'b0;
			if(_EOC_FLAG_) RIS_REG[2] <= 1'b1; else if(ICR_REG[2]) RIS_REG[2] <= 1'b0;

		end

	assign irq = |MIS_REG;

	assign	PRDATA = 
			(PADDR[15:0] == TCTRL_REG_ADDR) ? TCTRL_REG :
			(PADDR[15:0] == CHSEL_REG_ADDR) ? CHSEL_REG :
			(PADDR[15:0] == CTRL_REG_ADDR) ? CTRL_REG :
			(PADDR[15:0] == SOC_REG_ADDR) ? SOC_REG :
			(PADDR[15:0] == SEQCTRL0_REG_ADDR) ? SEQCTRL0_REG :
			(PADDR[15:0] == SEQCTRL1_REG_ADDR) ? SEQCTRL1_REG :
			(PADDR[15:0] == FIFOLEVEL_REG_ADDR) ? FIFOLEVEL_REG :
			(PADDR[15:0] == RIS_REG_ADDR) ? RIS_REG :
			(PADDR[15:0] == ICR_REG_ADDR) ? ICR_REG :
			(PADDR[15:0] == IM_REG_ADDR) ? IM_REG :
			(PADDR[15:0] == DATA_REG_ADDR) ? DATA_REG :
			(PADDR[15:0] == MIS_REG_ADDR) ? MIS_REG :
			32'hDEADBEEF;


	assign PREADY = 1'b1;

endmodule
